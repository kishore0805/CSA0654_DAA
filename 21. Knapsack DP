#include <stdio.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the knapsack problem using dynamic programming
int knapsack(int W, int wt[], int val[], int n) {
    int i, w;
    int K[n+1][W+1];

    // Build the K table in a bottom-up manner
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i-1] <= w)
                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]);
            else
                K[i][w] = K[i-1][w];
        }
    }
    return K[n][W];
}

int main() {
    int W; // Maximum weight of the knapsack
    int n; // Number of items

    // Input the number of items
    printf("Enter the number of items: ");
    scanf("%d", &n);

    int wt[n]; // Array to store weights of items
    int val[n]; // Array to store values of items

    // Input weights and values
    printf("Enter the weights of the items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &wt[i]);
    }

    printf("Enter the values of the items:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &val[i]);
    }

    // Input the maximum weight of the knapsack
    printf("Enter the maximum weight of the knapsack: ");
    scanf("%d", &W);

    // Calculate the maximum value that can be obtained
    int result = knapsack(W, wt, val, n);

    // Output the result
    printf("Maximum value in Knapsack = %d\n", result);

    return 0;
}
